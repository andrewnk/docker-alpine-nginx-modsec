.build_docker_image:
  services:
    - docker:dind
  variables:
    CI_IMAGE_NAME: "${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
    BASE_IMAGE_CACHE_TAG: ""
    DOCKER_BUILDKIT: 1
    DOCKER_BUILD_ARGS: ""
    DOCKER_BUILD_CONTEXT: .
    DOCKER_CLI_EXPERIMENTAL: "enabled"
    DOCKER_IMAGE_NAME: ""
    DOCKER_TARGET: ""
    DOCKERFILE_FILENAME: Dockerfile
    DOCKERFILE_PATH: ./
    IMAGE_CACHE_TAGS: "${CI_COMMIT_REF_SLUG} ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME} ${CI_DEFAULT_BRANCH}" #tags to loop through for cache - order matters
    USE_CACHE: "true"
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - >
      if [ "${USE_CACHE}" = true ]; then
        # work our way through possible image tags to find a potential match to use for cache
        echo "${IMAGE_CACHE_TAGS}" | tr ' ' '\n' | while read tag; do
          # Check registry where image tag has DOCKER_TARGET
          if docker manifest inspect ${CI_REGISTRY_IMAGE}${DOCKER_IMAGE_NAME:+/$DOCKER_IMAGE_NAME}:${tag}${DOCKER_TARGET:+-$DOCKER_TARGET} > /dev/null; then
            image_tag=${tag}${DOCKER_TARGET:+-$DOCKER_TARGET}
            break
          elif docker manifest inspect ${CI_REGISTRY_IMAGE}${DOCKER_IMAGE_NAME:+/$DOCKER_IMAGE_NAME}:${tag} > /dev/null; then
            # Check registry where image tag does not have a DOCKER_TARGET
            image_tag=${tag}
            break
          fi
        done

        # Check if a base image tag env variable is passed and, if so, check if an image exists in the registry with that tag.
        # if so use that image as cache for building
        if [ -n "${BASE_IMAGE_CACHE_TAG}" ]; then
          if docker manifest inspect ${CI_REGISTRY_IMAGE}${DOCKER_IMAGE_NAME:+/$DOCKER_IMAGE_NAME}:${BASE_IMAGE_CACHE_TAG} > /dev/null; then
            base_image_tag=${BASE_IMAGE_CACHE_TAG}
          fi
        fi

        docker build --build-arg BUILDKIT_INLINE_CACHE=1 \
          ${DOCKER_BUILD_ARGS:+$DOCKER_BUILD_ARGS} \
          ${DOCKER_TARGET:+--target $DOCKER_TARGET} \
          ${base_image_tag:+ --cache-from ${CI_REGISTRY_IMAGE}${DOCKER_IMAGE_NAME:+/$DOCKER_IMAGE_NAME}:${base_image_tag}} \
          ${image_tag:+ --cache-from ${CI_REGISTRY_IMAGE}${DOCKER_IMAGE_NAME:+/$DOCKER_IMAGE_NAME}:${image_tag}} \
          -f ${DOCKERFILE_PATH}${DOCKERFILE_FILENAME} \
          -t ${CI_IMAGE_NAME}${DOCKER_TARGET:+-$DOCKER_TARGET} \
          ${DOCKER_BUILD_CONTEXT}
      else
        # don't use cache when building
        docker build --no-cache --build-arg BUILDKIT_INLINE_CACHE=1 \
          ${DOCKER_BUILD_ARGS:+$DOCKER_BUILD_ARGS} \
          ${DOCKER_TARGET:+--target $DOCKER_TARGET} \
          -f ${DOCKERFILE_PATH}${DOCKERFILE_FILENAME} \
          -t ${CI_IMAGE_NAME}${DOCKER_TARGET:+-$DOCKER_TARGET} \
          ${DOCKER_BUILD_CONTEXT}
      fi
  after_script:
    - docker logout ${CI_REGISTRY}
